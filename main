{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# **Instalações e importações necessárias**"
      ],
      "metadata": {
        "id": "BNQAfbaTS4DY"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-2WLCpAd8L9x",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "045a47d0-7615-42bb-9ce8-ebb97e378c60"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (1.5.3)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.3.post1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.23.5)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas) (1.16.0)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n",
            "Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.23.5)\n",
            "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.11.4)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.3.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.2.0)\n"
          ]
        }
      ],
      "source": [
        "!pip install pandas\n",
        "!pip install scikit-learn"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "y-crOrLh2Ia5"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_curve, auc, precision_recall_curve, average_precision_score, precision_score, recall_score, f1_score\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Conexão com o drive para obtenção do dataset permanentemente**"
      ],
      "metadata": {
        "id": "I3gJiA0fTKPQ"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y6mIFvsbAmtz",
        "outputId": "210163e7-fbab-4db8-d2bf-865bd3ae8bf5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Leitura do dataset, exlusão da coluna ID e demais verificações**"
      ],
      "metadata": {
        "id": "tDcxxJkfTh5x"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8Rjsnjq48zCN"
      },
      "outputs": [],
      "source": [
        "dataset = pd.read_csv(\"./drive/Shareddrives/Projeto IA/breast-cancer.csv\")\n",
        "data = dataset.copy()\n",
        "data.drop([\"id\"],axis=1,inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        },
        "id": "-DFn_lRm9F8m",
        "outputId": "f06669f6-129d-4568-e4f1-4148b6b9269f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",
              "0         M        17.99         10.38          122.80     1001.0   \n",
              "1         M        20.57         17.77          132.90     1326.0   \n",
              "2         M        19.69         21.25          130.00     1203.0   \n",
              "3         M        11.42         20.38           77.58      386.1   \n",
              "4         M        20.29         14.34          135.10     1297.0   \n",
              "\n",
              "   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",
              "0          0.11840           0.27760          0.3001              0.14710   \n",
              "1          0.08474           0.07864          0.0869              0.07017   \n",
              "2          0.10960           0.15990          0.1974              0.12790   \n",
              "3          0.14250           0.28390          0.2414              0.10520   \n",
              "4          0.10030           0.13280          0.1980              0.10430   \n",
              "\n",
              "   symmetry_mean  ...  radius_worst  texture_worst  perimeter_worst  \\\n",
              "0         0.2419  ...         25.38          17.33           184.60   \n",
              "1         0.1812  ...         24.99          23.41           158.80   \n",
              "2         0.2069  ...         23.57          25.53           152.50   \n",
              "3         0.2597  ...         14.91          26.50            98.87   \n",
              "4         0.1809  ...         22.54          16.67           152.20   \n",
              "\n",
              "   area_worst  smoothness_worst  compactness_worst  concavity_worst  \\\n",
              "0      2019.0            0.1622             0.6656           0.7119   \n",
              "1      1956.0            0.1238             0.1866           0.2416   \n",
              "2      1709.0            0.1444             0.4245           0.4504   \n",
              "3       567.7            0.2098             0.8663           0.6869   \n",
              "4      1575.0            0.1374             0.2050           0.4000   \n",
              "\n",
              "   concave points_worst  symmetry_worst  fractal_dimension_worst  \n",
              "0                0.2654          0.4601                  0.11890  \n",
              "1                0.1860          0.2750                  0.08902  \n",
              "2                0.2430          0.3613                  0.08758  \n",
              "3                0.2575          0.6638                  0.17300  \n",
              "4                0.1625          0.2364                  0.07678  \n",
              "\n",
              "[5 rows x 31 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8a406769-7c4c-41ff-934e-67479d1299d2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>diagnosis</th>\n",
              "      <th>radius_mean</th>\n",
              "      <th>texture_mean</th>\n",
              "      <th>perimeter_mean</th>\n",
              "      <th>area_mean</th>\n",
              "      <th>smoothness_mean</th>\n",
              "      <th>compactness_mean</th>\n",
              "      <th>concavity_mean</th>\n",
              "      <th>concave points_mean</th>\n",
              "      <th>symmetry_mean</th>\n",
              "      <th>...</th>\n",
              "      <th>radius_worst</th>\n",
              "      <th>texture_worst</th>\n",
              "      <th>perimeter_worst</th>\n",
              "      <th>area_worst</th>\n",
              "      <th>smoothness_worst</th>\n",
              "      <th>compactness_worst</th>\n",
              "      <th>concavity_worst</th>\n",
              "      <th>concave points_worst</th>\n",
              "      <th>symmetry_worst</th>\n",
              "      <th>fractal_dimension_worst</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>M</td>\n",
              "      <td>17.99</td>\n",
              "      <td>10.38</td>\n",
              "      <td>122.80</td>\n",
              "      <td>1001.0</td>\n",
              "      <td>0.11840</td>\n",
              "      <td>0.27760</td>\n",
              "      <td>0.3001</td>\n",
              "      <td>0.14710</td>\n",
              "      <td>0.2419</td>\n",
              "      <td>...</td>\n",
              "      <td>25.38</td>\n",
              "      <td>17.33</td>\n",
              "      <td>184.60</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>0.1622</td>\n",
              "      <td>0.6656</td>\n",
              "      <td>0.7119</td>\n",
              "      <td>0.2654</td>\n",
              "      <td>0.4601</td>\n",
              "      <td>0.11890</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>M</td>\n",
              "      <td>20.57</td>\n",
              "      <td>17.77</td>\n",
              "      <td>132.90</td>\n",
              "      <td>1326.0</td>\n",
              "      <td>0.08474</td>\n",
              "      <td>0.07864</td>\n",
              "      <td>0.0869</td>\n",
              "      <td>0.07017</td>\n",
              "      <td>0.1812</td>\n",
              "      <td>...</td>\n",
              "      <td>24.99</td>\n",
              "      <td>23.41</td>\n",
              "      <td>158.80</td>\n",
              "      <td>1956.0</td>\n",
              "      <td>0.1238</td>\n",
              "      <td>0.1866</td>\n",
              "      <td>0.2416</td>\n",
              "      <td>0.1860</td>\n",
              "      <td>0.2750</td>\n",
              "      <td>0.08902</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>M</td>\n",
              "      <td>19.69</td>\n",
              "      <td>21.25</td>\n",
              "      <td>130.00</td>\n",
              "      <td>1203.0</td>\n",
              "      <td>0.10960</td>\n",
              "      <td>0.15990</td>\n",
              "      <td>0.1974</td>\n",
              "      <td>0.12790</td>\n",
              "      <td>0.2069</td>\n",
              "      <td>...</td>\n",
              "      <td>23.57</td>\n",
              "      <td>25.53</td>\n",
              "      <td>152.50</td>\n",
              "      <td>1709.0</td>\n",
              "      <td>0.1444</td>\n",
              "      <td>0.4245</td>\n",
              "      <td>0.4504</td>\n",
              "      <td>0.2430</td>\n",
              "      <td>0.3613</td>\n",
              "      <td>0.08758</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>M</td>\n",
              "      <td>11.42</td>\n",
              "      <td>20.38</td>\n",
              "      <td>77.58</td>\n",
              "      <td>386.1</td>\n",
              "      <td>0.14250</td>\n",
              "      <td>0.28390</td>\n",
              "      <td>0.2414</td>\n",
              "      <td>0.10520</td>\n",
              "      <td>0.2597</td>\n",
              "      <td>...</td>\n",
              "      <td>14.91</td>\n",
              "      <td>26.50</td>\n",
              "      <td>98.87</td>\n",
              "      <td>567.7</td>\n",
              "      <td>0.2098</td>\n",
              "      <td>0.8663</td>\n",
              "      <td>0.6869</td>\n",
              "      <td>0.2575</td>\n",
              "      <td>0.6638</td>\n",
              "      <td>0.17300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>M</td>\n",
              "      <td>20.29</td>\n",
              "      <td>14.34</td>\n",
              "      <td>135.10</td>\n",
              "      <td>1297.0</td>\n",
              "      <td>0.10030</td>\n",
              "      <td>0.13280</td>\n",
              "      <td>0.1980</td>\n",
              "      <td>0.10430</td>\n",
              "      <td>0.1809</td>\n",
              "      <td>...</td>\n",
              "      <td>22.54</td>\n",
              "      <td>16.67</td>\n",
              "      <td>152.20</td>\n",
              "      <td>1575.0</td>\n",
              "      <td>0.1374</td>\n",
              "      <td>0.2050</td>\n",
              "      <td>0.4000</td>\n",
              "      <td>0.1625</td>\n",
              "      <td>0.2364</td>\n",
              "      <td>0.07678</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 31 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a406769-7c4c-41ff-934e-67479d1299d2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8a406769-7c4c-41ff-934e-67479d1299d2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8a406769-7c4c-41ff-934e-67479d1299d2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e6d6a90a-b62e-475d-8d59-8d52ec7ba83f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e6d6a90a-b62e-475d-8d59-8d52ec7ba83f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e6d6a90a-b62e-475d-8d59-8d52ec7ba83f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Wtcvjuo69I2y",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2f2e8896-6455-4c12-d41c-c575602d039c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "diagnosis                  0\n",
              "radius_mean                0\n",
              "texture_mean               0\n",
              "perimeter_mean             0\n",
              "area_mean                  0\n",
              "smoothness_mean            0\n",
              "compactness_mean           0\n",
              "concavity_mean             0\n",
              "concave points_mean        0\n",
              "symmetry_mean              0\n",
              "fractal_dimension_mean     0\n",
              "radius_se                  0\n",
              "texture_se                 0\n",
              "perimeter_se               0\n",
              "area_se                    0\n",
              "smoothness_se              0\n",
              "compactness_se             0\n",
              "concavity_se               0\n",
              "concave points_se          0\n",
              "symmetry_se                0\n",
              "fractal_dimension_se       0\n",
              "radius_worst               0\n",
              "texture_worst              0\n",
              "perimeter_worst            0\n",
              "area_worst                 0\n",
              "smoothness_worst           0\n",
              "compactness_worst          0\n",
              "concavity_worst            0\n",
              "concave points_worst       0\n",
              "symmetry_worst             0\n",
              "fractal_dimension_worst    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "data.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VH0yS0czE5Oj",
        "outputId": "726ec838-a8a4-4222-8624-a8974c8aac76"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "diagnosis\n",
              "B    357\n",
              "M    212\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "diagnostico = data.groupby('diagnosis').size()\n",
        "diagnostico"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cw-F59cuOCHR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "84907d45-0fa6-47a2-b530-e5f0406853d7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method DataFrame.groupby of      diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",
              "0            1        17.99         10.38          122.80     1001.0   \n",
              "1            1        20.57         17.77          132.90     1326.0   \n",
              "2            1        19.69         21.25          130.00     1203.0   \n",
              "3            1        11.42         20.38           77.58      386.1   \n",
              "4            1        20.29         14.34          135.10     1297.0   \n",
              "..         ...          ...           ...             ...        ...   \n",
              "564          1        21.56         22.39          142.00     1479.0   \n",
              "565          1        20.13         28.25          131.20     1261.0   \n",
              "566          1        16.60         28.08          108.30      858.1   \n",
              "567          1        20.60         29.33          140.10     1265.0   \n",
              "568          0         7.76         24.54           47.92      181.0   \n",
              "\n",
              "     smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",
              "0            0.11840           0.27760         0.30010              0.14710   \n",
              "1            0.08474           0.07864         0.08690              0.07017   \n",
              "2            0.10960           0.15990         0.19740              0.12790   \n",
              "3            0.14250           0.28390         0.24140              0.10520   \n",
              "4            0.10030           0.13280         0.19800              0.10430   \n",
              "..               ...               ...             ...                  ...   \n",
              "564          0.11100           0.11590         0.24390              0.13890   \n",
              "565          0.09780           0.10340         0.14400              0.09791   \n",
              "566          0.08455           0.10230         0.09251              0.05302   \n",
              "567          0.11780           0.27700         0.35140              0.15200   \n",
              "568          0.05263           0.04362         0.00000              0.00000   \n",
              "\n",
              "     symmetry_mean  ...  radius_worst  texture_worst  perimeter_worst  \\\n",
              "0           0.2419  ...        25.380          17.33           184.60   \n",
              "1           0.1812  ...        24.990          23.41           158.80   \n",
              "2           0.2069  ...        23.570          25.53           152.50   \n",
              "3           0.2597  ...        14.910          26.50            98.87   \n",
              "4           0.1809  ...        22.540          16.67           152.20   \n",
              "..             ...  ...           ...            ...              ...   \n",
              "564         0.1726  ...        25.450          26.40           166.10   \n",
              "565         0.1752  ...        23.690          38.25           155.00   \n",
              "566         0.1590  ...        18.980          34.12           126.70   \n",
              "567         0.2397  ...        25.740          39.42           184.60   \n",
              "568         0.1587  ...         9.456          30.37            59.16   \n",
              "\n",
              "     area_worst  smoothness_worst  compactness_worst  concavity_worst  \\\n",
              "0        2019.0           0.16220            0.66560           0.7119   \n",
              "1        1956.0           0.12380            0.18660           0.2416   \n",
              "2        1709.0           0.14440            0.42450           0.4504   \n",
              "3         567.7           0.20980            0.86630           0.6869   \n",
              "4        1575.0           0.13740            0.20500           0.4000   \n",
              "..          ...               ...                ...              ...   \n",
              "564      2027.0           0.14100            0.21130           0.4107   \n",
              "565      1731.0           0.11660            0.19220           0.3215   \n",
              "566      1124.0           0.11390            0.30940           0.3403   \n",
              "567      1821.0           0.16500            0.86810           0.9387   \n",
              "568       268.6           0.08996            0.06444           0.0000   \n",
              "\n",
              "     concave points_worst  symmetry_worst  fractal_dimension_worst  \n",
              "0                  0.2654          0.4601                  0.11890  \n",
              "1                  0.1860          0.2750                  0.08902  \n",
              "2                  0.2430          0.3613                  0.08758  \n",
              "3                  0.2575          0.6638                  0.17300  \n",
              "4                  0.1625          0.2364                  0.07678  \n",
              "..                    ...             ...                      ...  \n",
              "564                0.2216          0.2060                  0.07115  \n",
              "565                0.1628          0.2572                  0.06637  \n",
              "566                0.1418          0.2218                  0.07820  \n",
              "567                0.2650          0.4087                  0.12400  \n",
              "568                0.0000          0.2871                  0.07039  \n",
              "\n",
              "[569 rows x 31 columns]>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "data.replace(\"M\", 1, inplace = True)\n",
        "data.replace(\"B\", 0, inplace = True)\n",
        "data.groupby"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "  # **Preparo dos dados**\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "MqqqI3KaUH-o"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Separar características (X) e rótulos (y)\n",
        "X = data.drop('diagnosis', axis=1)  # Coluna alvo\n",
        "y = data['diagnosis']\n",
        "\n",
        "# Dividir o conjunto de dados em treino e teste\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Padronizar os dados\n",
        "scaler = StandardScaler()\n",
        "X_train = scaler.fit_transform(X_train)\n",
        "X_test = scaler.transform(X_test)"
      ],
      "metadata": {
        "id": "vJRqs1_HJycD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Aplicação do algoritmo KNN**"
      ],
      "metadata": {
        "id": "I4s3BfjeHzPs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Criar um classificador KNN\n",
        "knn = KNeighborsClassifier(n_neighbors=3)\n",
        "\n",
        "# Treinar o modelo\n",
        "knn.fit(X_train, y_train)"
      ],
      "metadata": {
        "id": "I4hhbXriR2hR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "outputId": "a85dd0c1-3517-4273-82c7-a3130f7846d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(n_neighbors=3)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=3)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Fazer previsões no conjunto de teste\n",
        "y_pred = knn.predict(X_test)\n",
        "\n",
        "# Avaliar a precisão\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f'Acurácia de KNN: {accuracy:.2f}')\n",
        "\n",
        "# Exibir outras métricas\n",
        "print('Matriz de Confusão:')\n",
        "print('VN  FP\\nFN  VP\\n   ||')\n",
        "print(confusion_matrix(y_test, y_pred))\n",
        "print('VP = Verdadeiro Positivo\\nVN = Verdadeiro Negativo\\n')\n",
        "print('FP = Falso Positivo\\nFN = Falso Negativo')\n",
        "\n",
        "print('\\nRelatório de Classificação:')\n",
        "print(classification_report(y_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dHJ_QehOSEn5",
        "outputId": "3cc440bf-1149-4b5f-e46b-47fcfeb1c2b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Acurácia de KNN: 0.95\n",
            "Matriz de Confusão:\n",
            "VN  FP\n",
            "FN  VP\n",
            "   ||\n",
            "[[68  3]\n",
            " [ 3 40]]\n",
            "VP = Verdadeiro Positivo\n",
            "VN = Verdadeiro Negativo\n",
            "\n",
            "FP = Falso Positivo\n",
            "FN = Falso Negativo\n",
            "\n",
            "Relatório de Classificação:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.96      0.96      0.96        71\n",
            "           1       0.93      0.93      0.93        43\n",
            "\n",
            "    accuracy                           0.95       114\n",
            "   macro avg       0.94      0.94      0.94       114\n",
            "weighted avg       0.95      0.95      0.95       114\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Aplicação do algoritmo SVM**"
      ],
      "metadata": {
        "id": "PtLryIQc4sKg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "svc = SVC(kernel='rbf', C=1)\n",
        "svc.fit(X_train, y_train)\n",
        "y_pred_svc = svc.predict(X_test)\n",
        "\n",
        "accuracy_svc = accuracy_score(y_test, y_pred_svc)\n",
        "print(f'Acurácia de SVM: {accuracy_svc:.2f}')\n",
        "\n",
        "print('Matriz de Confusão:')\n",
        "print('VN  FP\\nFN  VP\\n   ||')\n",
        "print(confusion_matrix(y_test, y_pred_svc))\n",
        "print('VP = Verdadeiro Positivo\\nVN = Verdadeiro Negativo\\n')\n",
        "print('FP = Falso Positivo\\nFN = Falso Negativo')\n",
        "\n",
        "print('\\nRelatório de Classificação:')\n",
        "print(classification_report(y_test, y_pred_svc))"
      ],
      "metadata": {
        "id": "H68exDDdSPX6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ac16c523-eff2-4485-cf0d-cd1ef59fd74c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Acurácia de SVM: 0.98\n",
            "Matriz de Confusão:\n",
            "VN  FP\n",
            "FN  VP\n",
            "   ||\n",
            "[[71  0]\n",
            " [ 2 41]]\n",
            "VP = Verdadeiro Positivo\n",
            "VN = Verdadeiro Negativo\n",
            "\n",
            "FP = Falso Positivo\n",
            "FN = Falso Negativo\n",
            "\n",
            "Relatório de Classificação:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.97      1.00      0.99        71\n",
            "           1       1.00      0.95      0.98        43\n",
            "\n",
            "    accuracy                           0.98       114\n",
            "   macro avg       0.99      0.98      0.98       114\n",
            "weighted avg       0.98      0.98      0.98       114\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Aplicação do algoritmo Árvore de Decisão**\n",
        "\n"
      ],
      "metadata": {
        "id": "is3wgg_Y41qx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "treeClassifier = DecisionTreeClassifier()\n",
        "treeClassifier.fit(X_train, y_train)\n",
        "y_pred_tree = treeClassifier.predict(X_test)\n",
        "\n",
        "accuracy_tree = accuracy_score(y_test, y_pred_tree)\n",
        "print(f'Acurácia de Árvore de Decisão: {accuracy_tree:.2f}')\n",
        "\n",
        "print('Matriz de Confusão:')\n",
        "print('VN  FP\\nFN  VP\\n   ||')\n",
        "print(confusion_matrix(y_test, y_pred_tree))\n",
        "print('VP = Verdadeiro Positivo\\nVN = Verdadeiro Negativo\\n')\n",
        "print('FP = Falso Positivo\\nFN = Falso Negativo')\n",
        "\n",
        "print('\\nRelatório de Classificação:')\n",
        "print(classification_report(y_test, y_pred_tree))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6JR0qdbrY0NK",
        "outputId": "21020d8f-7a01-4503-93f7-9bc8af2e8cc3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Acurácia de Árvore de Decisão: 0.95\n",
            "Matriz de Confusão:\n",
            "VN  FP\n",
            "FN  VP\n",
            "   ||\n",
            "[[68  3]\n",
            " [ 3 40]]\n",
            "VP = Verdadeiro Positivo\n",
            "VN = Verdadeiro Negativo\n",
            "\n",
            "FP = Falso Positivo\n",
            "FN = Falso Negativo\n",
            "\n",
            "Relatório de Classificação:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.96      0.96      0.96        71\n",
            "           1       0.93      0.93      0.93        43\n",
            "\n",
            "    accuracy                           0.95       114\n",
            "   macro avg       0.94      0.94      0.94       114\n",
            "weighted avg       0.95      0.95      0.95       114\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Análise dos resultados**"
      ],
      "metadata": {
        "id": "k2plwj96KJeX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Função para plotar a curva ROC\n",
        "def plot_roc_curve(y_true, y_scores, label, color):\n",
        "    fpr, tpr, _ = roc_curve(y_true, y_scores)\n",
        "    roc_auc = auc(fpr, tpr)\n",
        "    plt.plot(fpr, tpr, color=color, lw=2, label=f'{label} (AUC = {roc_auc:.2f})')\n",
        "    plt.title('Curva ROC')\n",
        "    plt.xlabel('Taxa de Falsos Positivos')\n",
        "    plt.ylabel('Taxa de Verdadeiros Positivos')\n",
        "    plt.legend(labels)\n",
        "# Função para plotar a curva de Precisão-Revocação\n",
        "def plot_pr_curve(y_true, y_scores, label, color):\n",
        "    precision, recall, _ = precision_recall_curve(y_true, y_scores)\n",
        "    avg_precision = average_precision_score(y_true, y_scores)\n",
        "    plt.plot(recall, precision, color=color, lw=2, label=f'{label} (Avg Precision = {avg_precision:.2f})')\n",
        "    plt.title('Curva de Precisão-Revocação')\n",
        "    plt.xlabel('Revocação')\n",
        "    plt.ylabel('Precisão')\n",
        "    plt.legend(labels)"
      ],
      "metadata": {
        "id": "yAOzZGWLg3UN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Modelos já treinados e testados\n",
        "models = {'KNN': knn, 'SVM': svc, 'Decision Tree': treeClassifier}"
      ],
      "metadata": {
        "id": "JrAg2arOMb7z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "labels = []\n",
        "# Iterar sobre os modelos\n",
        "for model_name, model in models.items():\n",
        "    # Calcular scores de decisão\n",
        "    if model_name != 'SVM':\n",
        "        # SVC usa predict_proba para obter scores de decisão\n",
        "        y_scores = model.predict_proba(X_test)[:, 1]\n",
        "    else:\n",
        "        # KNN e Decision Tree usam decision_function\n",
        "        y_scores = model.decision_function(X_test)\n",
        "\n",
        "    # Plotar a curva ROC\n",
        "    labels.append(model_name)\n",
        "    plot_roc_curve(y_test, y_scores, model_name, color=f\"{'rgb'[list(models.keys()).index(model_name)]}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "nIjZHHx3M1ks",
        "outputId": "585f7a9a-d816-450c-8d8e-c8b08fb55b89"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "labels = []\n",
        "# Iterar novamente sobre os modelos para plotar a curva de Precisão-Revocação\n",
        "for model_name, model in models.items():\n",
        "    # Calcular scores de decisão\n",
        "    if model_name != 'SVM':\n",
        "        # SVM usa predict_proba para obter scores de decisão\n",
        "        y_scores = model.predict_proba(X_test)[:, 1]\n",
        "    else:\n",
        "        # KNN e Decision Tree usam decision_function\n",
        "        y_scores = model.decision_function(X_test)\n",
        "\n",
        "    # Plotar a curva de Precisão-Revocação\n",
        "    labels.append(model_name)\n",
        "    plot_pr_curve(y_test, y_scores, model_name, color=f\"{'rgb'[list(models.keys()).index(model_name)]}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "12kXpwUgPOhU",
        "outputId": "f2ccfed6-aaea-4c63-9914-bb804f42773c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Lista para armazenar as métricas de precisão\n",
        "precision_scores = []\n",
        "\n",
        "# Iterar sobre os modelos\n",
        "for model_name, model in models.items():\n",
        "    # Fazer previsões\n",
        "    y_pred = model.predict(X_test)\n",
        "\n",
        "    # Calcular a precisão e armazenar na lista\n",
        "    precision = precision_score(y_test, y_pred)\n",
        "    precision_scores.append(precision)\n",
        "\n",
        "# Plotar o gráfico de barras\n",
        "plt.bar(models.keys(), precision_scores, color=['blue', 'green', 'red'])\n",
        "plt.title('Comparação de Precision Score dos Modelos')\n",
        "plt.xlabel('Modelo')\n",
        "plt.ylabel('Precision Score')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "dFWBBOFuPc8s",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "8963ebcf-658c-44cf-fc3b-ffa75c0c47af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Lista para armazenar as métricas de f1\n",
        "f1_scores = []\n",
        "\n",
        "# Iterar sobre os modelos\n",
        "for model_name, model in models.items():\n",
        "    # Fazer previsões\n",
        "    y_pred = model.predict(X_test)\n",
        "\n",
        "    # Calcular a f1 e armazenar na lista\n",
        "    f1 = f1_score(y_test, y_pred)\n",
        "    f1_scores.append(f1)\n",
        "\n",
        "# Plotar o gráfico de barras\n",
        "plt.bar(models.keys(), f1_scores, color=['blue', 'green', 'red'])\n",
        "plt.title('Comparação de F1 Score dos Modelos')\n",
        "plt.xlabel('Modelo')\n",
        "plt.ylabel('F1 Score')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "uXIodzoyqkmU",
        "outputId": "42a9f89a-6f82-45e4-9694-b3ef471a3241"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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iex19tZbb6levXq5TnP1l3lhGzp0qDp27Khly5bp22+/1ejRoxUdHa0ffvhB9evXz/M4PXr00Pvvv6+SJUuqW7duRXZVWPY6HT58uCIiInLtc/U/mm5GQa0nFL5b75MHltKhQwfNmjVL8fHxCgsLu27fkJAQZWVlKTEx0f4vOElKSUnR6dOnFRISUqC1ZWVlaf/+/fa9NZLslxhn32Plyy+/lKenp7799lt5eHjY+82dOzfP88nrGJUrV1ZWVpZ27tx5zS+9uLg4/fHHH1q6dKlatmxpbz9w4IBDv+x1tWfPnhz/et6zZ88N12VISIh9D8PV015dsySVL1++UPe8FAY3NzfVqVNHiYmJOnHihMqXLy8fH58bhvGQkJAc60GS/UqhG63b7HXm4+NzU+ssJCREv/76q4wxDv8QuLqm/G4DlStX1osvvqgXX3xRiYmJqlevniZPnqwFCxbkubYePXpozJgxOnbsmD755JPrLsP27duVlZXlEICuXochISGKjY3V2bNnHQLf1cuavQfWzc0t3+vUGesJhY9LwVGoRowYoRIlSuipp55SSkpKjtf37dunadOmSfrzXhmSFBMT49BnypQpkqT27dsXeH3Tp0+3/78xRtOnT5ebm5seeOABSX/uBbLZbA6XWR88eFDLli3L8zzyOkbnzp3l4uKi119/PccemOy9Ttl7pf66FyojI0PvvfeeQ/9GjRqpfPnymjlzpsNhsNWrV2vXrl03XJft2rXTf//7XyUkJNjbUlNT9emnnzr0i4iIkI+PjyZMmKDLly/nGCc1NfW68ykKiYmJOnz4cI7206dPKz4+XqVKlVK5cuXk4uKizp0765tvvtHPP/+co3/2Om/Xrp0SEhIUHx9vf+3cuXOaNWuWQkNDb3hYsWHDhqpcubLefvttnT17NsfrN1pn7dq109GjRx1uJXD+/PkcN8LM6zZw/vx5Xbx40WHaypUrq2TJkte8vPxaKleurJiYGEVHR6tJkybXXYbk5GQtWrTI3nblyhW9++678vb2VqtWrez9rly5ovfff9/eLzMzU++++67DeOXLl9f999+vDz74QMeOHcsxv+utU2esJxQ+9tygUFWuXFkLFy5Ut27dVKNGDYc7FG/YsEGLFy9Wnz59JEl169ZV7969NWvWLPvhl4SEBM2fP1+dO3dW69atC7Q2T09PrVmzRr1791bTpk21evVqrVy5Uq+88orKlSsn6c9ANWXKFLVt21Y9evTQ8ePHNWPGDFWpUkXbt2/P03zyOkaVKlX06quvavz48WrRooX++c9/ysPDQxs3blRgYKCio6PVrFkzlSpVSr1799bgwYNls9n0ySef5Djk5ubmpkmTJqlv375q1aqVunfvrpSUFE2bNk2hoaF64YUXrlvziBEj9Mknn6ht27YaMmSISpQooVmzZtn/xZ3Nx8dH77//vnr16qUGDRroiSeeULly5XT48GGtXLlSzZs3dwiQN+vQoUP2PQHZweONN96Q9Oe/vHv16nXNabdt26YePXro4YcfVosWLVS6dGkdOXJE8+fP19GjRxUTE2MPjRMmTNB3332nVq1aaeDAgapRo4aOHTumxYsXa/369fLz89PLL7+szz77TA8//LAGDx6s0qVLa/78+Tpw4IC+/PLLGx6KcXFx0UcffaSHH35Y9957r/r27augoCAdOXJEa9eulY+Pj7755ptrTj9gwABNnz5dkZGR2rRpkwICAvTJJ5+oePHiDv3yug3s3btXDzzwgLp27aqaNWuqWLFi+uqrr5SSkuLwExh59df7Vl3LwIED9cEHH6hPnz7atGmTQkNDtWTJEv3000+KiYlRyZIlJUkdO3ZU8+bN9fLLL+vgwYOqWbOmli5daj+37K9mzJihf/zjH6pdu7YGDBigSpUqKSUlRfHx8fr999+1bdu2XGtx1npCIXPeucy4k+zdu9cMGDDAhIaGGnd3d1OyZEnTvHlz8+677zpcunn58mUzbtw4U7FiRePm5maCg4PNqFGjHPoY8+fVUldfFWVMzqsyjDHmwIEDOS7h7N27tylRooTZt2+feeihh0zx4sWNv7+/iYqKynEFx+zZs03VqlWNh4eHqV69upk7d679KpEbzTu/YxhjzJw5c0z9+vXtV/S0atXKftWJMcb89NNP5r777jNeXl4mMDDQjBgxwn4Z/F8vdzfGmEWLFpn69esbDw8PU7p0adOzZ0/7VSM3sn37dtOqVSvj6elpgoKCzPjx483s2bNzvUx77dq1JiIiwvj6+hpPT09TuXJl06dPH/Pzzz9fdx7ZV64sXrw4T/1ye7Rq1eq606akpJiJEyeaVq1amYCAAFOsWDFTqlQp06ZNG7NkyZIc/Q8dOmQiIyNNuXLljIeHh6lUqZIZNGiQuXTpkr3Pvn37zGOPPWb8/PyMp6enadKkSY57Ft1o2bZs2WL++c9/mjJlyhgPDw8TEhJiunbtamJjY6+7PNk1PvLII6Z48eKmbNmyZsiQIWbNmjU3tQ2cOHHCDBo0yFSvXt2UKFHC+Pr6mqZNmzpcan4tf71a6npye2+kpKSYvn37mrJlyxp3d3dTu3Zth0u7s/3xxx+mV69exsfHx/j6+ppevXqZLVu25LgU3Jg//y6RkZGmQoUKxs3NzQQFBZkOHTo4/J1zu89NYa8nFD2bMTdxliVwm+vTp4+WLFmS62GBW8XBgwf14IMPaseOHXJ3d3d2OQBw2+CcG+AWFRoaKm9v7xtetg0AcMQ5N8AtaOzYsSpbtqwSExNv6b1LAHArItwAt6CPP/5YR48eVevWra953w4AQO445wYAAFgK59wAAABLIdwAAABLuePOucnKytLRo0dVsmTJPP+GEQAAcC5jjM6cOaPAwMAb3izzjgs3R48ezfGr0QAA4PaQlJSku+6667p97rhwk31b76SkJPn4+Di5GgAAkBfp6ekKDg62f49fzx0XbrIPRfn4+BBuAAC4zeTllBJOKAYAAJZCuAEAAJbi1HDz//7f/1PHjh0VGBgom82mZcuW3XCauLg4NWjQQB4eHqpSpYrmzZtX6HUCAIDbh1PDzblz51S3bl3NmDEjT/0PHDig9u3bq3Xr1tq6dauGDh2qp556St9++20hVwoAAG4XTj2h+OGHH9bDDz+c5/4zZ85UxYoVNXnyZElSjRo1tH79ek2dOpXf3wEAAJJus3Nu4uPjFR4e7tAWERGh+Pj4a05z6dIlpaenOzwAAIB13VbhJjk5Wf7+/g5t/v7+Sk9P14ULF3KdJjo6Wr6+vvYHN/ADAMDabqtwczNGjRqltLQ0+yMpKcnZJQEAgEJ0W93Er0KFCkpJSXFoS0lJkY+Pj7y8vHKdxsPDQx4eHkVRHgAAuAXcVntuwsLCFBsb69D2/fffKywszEkVAQCAW41Tw83Zs2e1detWbd26VdKfl3pv3bpVhw8flvTnIaXIyEh7/6efflr79+/XiBEjtHv3br333nv64osv9MILLzijfAAAcAtyarj5+eefVb9+fdWvX1+SNGzYMNWvX19jxoyRJB07dswedCSpYsWKWrlypb7//nvVrVtXkydP1kcffcRl4AAAwM5mjDHOLqIopaeny9fXV2lpafxwJgAAt4n8fH/fVufcAAAA3AjhBgAAWMptdSk4gBuzjbM5uwQ4mYm6o842AHJgzw0AALAUwg0AALAUwg0AALAUwg0AALAUwg0AALAUwg0AALAUwg0AALAUwg0AALAUwg0AALAUwg0AALAUwg0AALAUwg0AALAUwg0AALAUwg0AALAUwg0AALCUYs4uwGpsNmdXAGczxtkVAMCdjT03AADAUgg3AADAUgg3AADAUgg3AADAUjihGABQsLiyAk6+soI9NwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFIINwAAwFKcHm5mzJih0NBQeXp6qmnTpkpISLhu/5iYGN1zzz3y8vJScHCwXnjhBV28eLGIqgUAALc6p4abRYsWadiwYYqKitLmzZtVt25dRURE6Pjx47n2X7hwoV5++WVFRUVp165dmj17thYtWqRXXnmliCsHAAC3KqeGmylTpmjAgAHq27evatasqZkzZ6p48eKaM2dOrv03bNig5s2bq0ePHgoNDdVDDz2k7t2733BvDwAAuHM4LdxkZGRo06ZNCg8P/18xLi4KDw9XfHx8rtM0a9ZMmzZtsoeZ/fv3a9WqVWrXrt0153Pp0iWlp6c7PAAAgHUVc9aMT5w4oczMTPn7+zu0+/v7a/fu3blO06NHD504cUL/+Mc/ZIzRlStX9PTTT1/3sFR0dLTGjRtXoLUDAIBbl9NPKM6PuLg4TZgwQe+99542b96spUuXauXKlRo/fvw1pxk1apTS0tLsj6SkpCKsGAAAFDWn7bkpW7asXF1dlZKS4tCekpKiChUq5DrN6NGj1atXLz311FOSpNq1a+vcuXMaOHCgXn31Vbm45MxqHh4e8vDwKPgFAAAAtySn7blxd3dXw4YNFRsba2/LyspSbGyswsLCcp3m/PnzOQKMq6urJMkYU3jFAgCA24bT9txI0rBhw9S7d281atRITZo0UUxMjM6dO6e+fftKkiIjIxUUFKTo6GhJUseOHTVlyhTVr19fTZs21W+//abRo0erY8eO9pADAADubE4NN926dVNqaqrGjBmj5ORk1atXT2vWrLGfZHz48GGHPTWvvfaabDabXnvtNR05ckTlypVTx44d9e9//9tZiwAAAG4xNnOHHc9JT0+Xr6+v0tLS5OPjU+Dj22wFPiRuM85+R9nGsRHe6UyUszdCtsE7XiF8EObn+/u2uloKAADgRgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUpwebmbMmKHQ0FB5enqqadOmSkhIuG7/06dPa9CgQQoICJCHh4eqVaumVatWFVG1AADgVlfMmTNftGiRhg0bppkzZ6pp06aKiYlRRESE9uzZo/Lly+fon5GRoQcffFDly5fXkiVLFBQUpEOHDsnPz6/oiwcAALckp4abKVOmaMCAAerbt68kaebMmVq5cqXmzJmjl19+OUf/OXPm6OTJk9qwYYPc3NwkSaGhoUVZMgAAuMU57bBURkaGNm3apPDw8P8V4+Ki8PBwxcfH5zrN119/rbCwMA0aNEj+/v6qVauWJkyYoMzMzGvO59KlS0pPT3d4AAAA63JauDlx4oQyMzPl7+/v0O7v76/k5ORcp9m/f7+WLFmizMxMrVq1SqNHj9bkyZP1xhtvXHM+0dHR8vX1tT+Cg4MLdDkAAMCtxeknFOdHVlaWypcvr1mzZqlh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b2o4FdsgnI1tsHDcaI9NNqcflho2bJh69+6tRo0aqUmTJoqJidG5c+fUt29fSVJkZKSCgoIUHR0tSRoyZIhatWqlyZMnq3379vr888/1888/a9asWc5cDAAAcItwerjp1q2bUlNTNWbMGCUnJ6tevXpas2aN/aThw4cPy8Xlfxd1NWvWTAsXLtRrr72mV155RVWrVtWyZctUq1YtZy0CAAC4hTj9PjewjkuXLik6OlqjRo3KcSgQKApsg3A2tsFbA+EGAABYitN/fgEAAKAgEW4AAIClEG4AAIClEG4AAJAUGhqqmJiYAu+Loke4wTX16dPHfnPFbEuWLJGnp6cmT56sPn36yGazaeLEiQ59li1b5nD357i4ONlsNt17773KzMx06Ovn56d58+YV1iLgNpeamqpnnnlGd999tzw8PFShQgVFRERo3bp1Klu2bI5tL9v48ePl7++vy5cva968ebLZbKpRo0aOfosXL5bNZlNoaGghLwluVvbnjM1mk5ubm/z9/fXggw9qzpw5ysrKKtB5bdy4UQMHDizwvjfjr8ud24Nt9voIN8izjz76SD179tT777+vF198UZLk6empSZMm6dSpUzecfv/+/fr4448Lu0xYSJcuXbRlyxbNnz9fe/fu1ddff637779faWlpevLJJzV37twc0xhjNG/ePEVGRsrNzU2SVKJECR0/flzx8fEOfWfPnq277767SJYFN69t27Y6duyYDh48qNWrV6t169YaMmSIOnTooCtXrhTYfMqVK6fixYsXeN+bMW3aNB07dsz+kKS5c+fan2/cuNGhf0ZGRqHVcjsi3CBP3nzzTT3//PP6/PPP7XePlqTw8HBVqFDBfgfp63n++ecVFRXl8CvtwLWcPn1aP/74oyZNmqTWrVsrJCRETZo00ahRo/TII4+of//+2rt3r9avX+8w3bp167R//37179/f3lasWDH16NFDc+bMsbf9/vvviouLU48ePYpsmXBzsvfaBQUFqUGDBnrllVe0fPlyrV692mHP7+nTp/XUU0+pXLly8vHxUZs2bbRt2zaHsb755hs1btxYnp6eKlu2rB599FH7a3891GSM0dixY+17DQMDAzV48OBc+0p/3nC2U6dO8vb2lo+Pj7p27erwO4hjx45VvXr19Mknnyg0NFS+vr564okndObMmVyX2dfXVxUqVLA/pD/3dGc/b9y4scaPH6/IyEj5+PjY9yKtX79eLVq0kJeXl4KDgzV48GCdO3fOPu6lS5c0fPhwBQUFqUSJEmratKni4uLy9fe4HRBucEMjR47U+PHjtWLFCocPAklydXXVhAkT9O677+r333+/7jhDhw7VlStX9O677xZmubAIb29veXt7a9myZbkG4tq1a6tx48YOgUX681+3zZo1U/Xq1R3a+/Xrpy+++ELnz5+XJM2bN09t27a13w0dt5c2bdqobt26Wrp0qb3t8ccf1/Hjx7V69Wpt2rRJDRo00AMPPKCTJ09KklauXKlHH31U7dq105YtWxQbG6smTZrkOv6XX36pqVOn6oMPPlBiYqKWLVum2rVr59o3KytLnTp10smTJ7Vu3Tp9//332r9/v7p16+bQb9++fVq2bJlWrFihFStWaN26ddc8tJoXb7/9turWrastW7Zo9OjR2rdvn9q2basuXbpo+/btWrRokdavX+/wW43PPfec4uPj9fnnn2v79u16/PHH1bZtWyUmJt50HbckA1xD7969jbu7u5FkYmNjc329U6dOxhhj7rvvPtOvXz9jjDFfffWV+eumtXbtWiPJnDp1ysycOdOULl3anD592hhjjK+vr5k7d26hLwtuT0uWLDGlSpUynp6eplmzZmbUqFFm27Zt9tdnzpxpvL29zZkzZ4wxxqSnp5vixYubjz76yN5n7ty5xtfX1xhjTL169cz8+fNNVlaWqVy5slm+fLmZOnWqCQkJKcrFQj789XPmat26dTM1atQwxhjz448/Gh8fH3Px4kWHPpUrVzYffPCBMcaYsLAw07Nnz2vOKyQkxEydOtUYY8zkyZNNtWrVTEZGxg37fvfdd8bV1dUcPnzY/vqOHTuMJJOQkGCMMSYqKsoUL17cpKen2/u89NJLpmnTptde+L+QZL766iuH+Xfu3NmhT//+/c3AgQMd2n788Ufj4uJiLly4YA4dOmRcXV3NkSNHHPo88MADZtSoUXmq43bBnhtcV506dRQaGqqoqCidPXv2mv0mTZqk+fPna9euXdcdr3///ipTpowmTZpU0KXCgrp06aKjR4/q66+/Vtu2bRUXF6cGDRrYD0V0795dmZmZ+uKLLyRJixYtkouLS45/MWfr16+f5s6dq3Xr1uncuXNq165dUS0KCoExxn7xwrZt23T27FmVKVPGvtfP29tbBw4c0L59+yRJW7du1QMPPJCnsR9//HFduHBBlSpV0oABA/TVV19d8/yeXbt2KTg4WMHBwfa2mjVrys/Pz+EzMTQ0VCVLlrQ/DwgI0PHjx/O93NkaNWrk8Hzbtm2aN2+ew/JHREQoKytLBw4c0C+//KLMzExVq1bNoc+6devs68gqCDe4rqCgIMXFxenIkSNq27btNY8Pt2zZUhERERo1atR1xytWrJj+/e9/a9q0aTp69GhhlAyL8fT01IMPPqjRo0drw4YN6tOnj6KioiRJPj4+euyxx+wnFs+dO1ddu3aVt7d3rmP17NlT//3vfzV27Fj16tVLxYo5/beD8Tfs2rVLFStWlCSdPXtWAQEB2rp1q8Njz549eumllyRJXl5eeR47ODhYe/bs0XvvvScvLy89++yzatmypS5fvnzT9Waf4J7NZrP9rSu+SpQo4fD87Nmz+te//uWw/Nu2bVNiYqIqV66ss2fPytXVVZs2bXLos2vXLk2bNu2m67gVEW5wQyEhIVq3bp2Sk5OvG3AmTpyob775JscVKVd7/PHHde+992rcuHGFUS4srmbNmg4nSPbv31/r16/XihUrtGHDBocTia9WunRpPfLII1q3bp369etXFOWikPzwww/65Zdf1KVLF0lSgwYNlJycrGLFiqlKlSoOj7Jly0r6c090bGxsnufh5eWljh076p133lFcXJzi4+P1yy+/5OhXo0YNJSUlKSkpyd62c+dOnT59WjVr1vybS5p3DRo00M6dO3Msf5UqVeTu7q769esrMzNTx48fz/F69knLVkG4QZ4EBwcrLi5Ox48fV0REhNLT03P0qV27tnr27Kl33nnnhuNNnDhRc+bMcfiSAv7qjz/+UJs2bbRgwQJt375dBw4c0OLFi/Xmm2+qU6dO9n4tW7ZUlSpVFBkZqerVq6tZs2bXHXfevHk6ceJEjhOOceu6dOmSkpOTdeTIEW3evFkTJkxQp06d1KFDB0VGRkr688rNsLAwde7cWd99950OHjyoDRs26NVXX9XPP/8sSYqKitJnn32mqKgo7dq1S7/88ss1D5HPmzdPs2fP1q+//qr9+/drwYIF8vLyUkhISI6+4eHh9s+/zZs3KyEhQZGRkWrVqlWOQ0eFaeTIkdqwYYOee+45bd26VYmJiVq+fLn9hOJq1aqpZ8+eioyM1NKlS3XgwAElJCQoOjpaK1euLLI6iwLhBnl21113KS4uTidOnLhmwHn99dfztJu1TZs2atOmTYHeowLW4u3traZNm2rq1Klq2bKlatWqpdGjR2vAgAGaPn26vZ/NZlO/fv106tSpPO2N8fLyUpkyZQqzdBSwNWvWKCAgQKGhoWrbtq3Wrl2rd955R8uXL5erq6ukP7eDVatWqWXLlurbt6+qVaumJ554QocOHbJfEXf//fdr8eLF+vrrr1WvXj21adNGCQkJuc7Tz89PH374oZo3b646deroP//5j7755ptctx2bzably5erVKlSatmypcLDw1WpUiUtWrSo8FZKLurUqaN169Zp7969atGiherXr68xY8YoMDDQ3mfu3LmKjIzUiy++qHvuuUedO3fWxo0bLXe/J5sxxji7CAAAgILCnhsAAGAphBsAAGAphBsAAGAphBsAAGAphBsAAGAphBsAAGAphBsAAGAphBsAlhMXFyebzabTp0/neZrQ0FDFxMQUWk0Aig7hBkCR69Onj2w2m55++ukcrw0aNEg2m019+vQp+sIAWALhBoBTBAcH6/PPP9eFCxfsbRcvXtTChQstdyt4AEWLcAPAKRo0aKDg4GAtXbrU3rZ06VLdfffdql+/vr3t0qVLGjx4sMqXLy9PT0/94x//0MaNGx3GWrVqlapVqyYvLy+1bt1aBw8ezDG/9evXq0WLFvLy8lJwcLAGDx583R9uPXz4sDp16iRvb2/5+Pioa9euSklJ+fsLDqDQEW4AOE2/fv00d+5c+/M5c+aob9++Dn1GjBihL7/8UvPnz9fmzZtVpUoVRURE6OTJk5KkpKQk/fOf/1THjh21detWPfXUU3r55Zcdxti3b5/atm2rLl26aPv27Vq0aJHWr19v/7Xkq2VlZalTp046efKk1q1bp++//1779+9Xt27dCngNACgUBgCKWO/evU2nTp3M8ePHjYeHhzl48KA5ePCg8fT0NKmpqaZTp06md+/e5uzZs8bNzc18+umn9mkzMjJMYGCgefPNN40xxowaNcrUrFnTYfyRI0caSebUqVPGGGP69+9vBg4c6NDnxx9/NC4uLubChQvGGGNCQkLM1KlTjTHGfPfdd8bV1dUcPnzY3n/Hjh1GkklISCjo1QGggBVzdrgCcOcqV66c2rdvr3nz5skYo/bt26ts2bL21/ft26fLly+refPm9jY3Nzc1adJEu3btkiTt2rVLTZs2dRg3LCzM4fm2bdu0fft2ffrpp/Y2Y4yysrJ04MAB1ahRw6H/rl27FBwcrODgYHtbzZo15efnp127dqlx48Z/f+EBFBrCDQCn6tevn/3w0IwZMwplHmfPntW//vUvDR48OMdrnLwMWA/n3ABwqrZt2yojI0OXL19WRESEw2uVK1eWu7u7fvrpJ3vb5cuXtXHjRtWsWVOSVKNGDSUkJDhM99///tfheYMGDbRz505VqVIlx8Pd3T1HTTVq1FBSUpKSkpLsbTt37tTp06ft8wVw6yLcAHAqV1dX7dq1Szt37pSrq6vDayVKlNAzzzyjl156SWvWrNHOnTs1YMAAnT9/Xv3795ckPf3000pMTNRLL72kPXv2aOHChZo3b57DOCNHjtSGDRv03HPPaevWrUpMTNTy5cuveUJxeHi4ateurZ49e2rz5s1KSEhQZGSkWrVqpUaNGhXKegBQcAg3AJzOx8dHPj4+ub42ceJEdenSRb169VKDBg3022+/6dtvv1WpUqUk/XlY6csvv9SyZctUt25dzZw5UxMmTHAYo06dOlq3bp327t2rFi1aqH79+hozZowCAwNznafNZtPy5ctVqlQptWzZUuHh4apUqZIWLVpUsAsOoFDYjDHG2UUAAAAUFPbcAAAASyHcAAAASyHcAAAASyHcAAAASyHcAAAASyHcAAAASyHcAAAASyHcAAAASyHcAAAASyHcAAAASyHcAAAASyHcAAAAS/n/APhkDDYATCtpAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Lista para armazenar as métricas de recall\n",
        "recall_scores = []\n",
        "\n",
        "# Iterar sobre os modelos\n",
        "for model_name, model in models.items():\n",
        "    # Fazer previsões\n",
        "    y_pred = model.predict(X_test)\n",
        "\n",
        "    # Calcular a recall e armazenar na lista\n",
        "    recall = recall_score(y_test, y_pred)\n",
        "    recall_scores.append(f1)\n",
        "\n",
        "# Plotar o gráfico de barras\n",
        "plt.bar(models.keys(), recall_scores, color=['blue', 'green', 'red'])\n",
        "plt.title('Comparação de Recall Score dos Modelos')\n",
        "plt.xlabel('Modelo')\n",
        "plt.ylabel('Recall Score')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "rYFmNHq1rLez",
        "outputId": "73063638-1c32-4ef6-ec3f-db8b52e7c47b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ryAX0WOjxBRR"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
